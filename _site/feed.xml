<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">ah && a</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2014-08-25T03:45:40+00:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Anders Howerton</name>
  <uri>http://localhost:4000/</uri>
  <email>anders.e.howerton@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Questions]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/questions/" />
  <id>http://localhost:4000/questions</id>
  <updated>2014-08-14T00:00:00-00:00</updated>
  <published>2014-08-24T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;how-to-ask-a-good-question&quot;&gt;How to Ask a Good Question&lt;/h2&gt;

&lt;p&gt;This is a great topic to write about because, historically, I’ve been a pretty terrible question asker. For a long time, I allowed myself to believe that asking questions (to another person) somehow indicates a kind of weakness, so I didn’t practice it much. &lt;/p&gt;

&lt;p&gt;I’m a much better question asker on the Internet, probably because the best asked questions of search engines are those asked in caveman syntax. The fewer, more important words, the better. Talking with real live people involves a higher, more sophisticated synthesis of nonverbal cues, body language, eye contact, preparation, and articulation. &lt;/p&gt;

&lt;p&gt;So, now I look to the Internet for help with asking questions of other humans. Here’s what the Internet answers:&lt;/p&gt;

&lt;h3 id=&quot;know-what-youre-looking-for&quot;&gt;Know what you’re Looking for.&lt;/h3&gt;

&lt;p&gt;A good question has an end in site; it’s not characterized by a “please tell me the history of the world” sort of open-endedness. It’s as precise as it hopes its answer to be. That said, don’t ask yes or no questions. Maybe thinking like a reporter would be a good goal for this one. Ask for nouns and verbs, very specific ones.&lt;/p&gt;

&lt;h3 id=&quot;use-follow-up-questions&quot;&gt;Use Follow Up Questions.&lt;/h3&gt;

&lt;p&gt;Learning to code has definitely honed my skills in this area. Rarely, have I had my questions answered in a single response regarding coding. I’ve learned that I have to take the pieces that come to me and look further down the road toward where they point. There’s a certain endurance involved with follow-up questions that I was complete wimp at before I started coding. Coding has taught me (across all topics) to ask early, ask often, ask again, rephrase, ask more. &lt;/p&gt;

&lt;h3 id=&quot;accepting-the-response&quot;&gt;Accepting the Response.&lt;/h3&gt;

&lt;p&gt;There’s power in silence, especially when it’s being used to formulate an accurate exchange. When a question is asked, it’s good to give the asked a chance to answer. Not interupting would definitely be filed here too. Even if, in asking the question, the answer comes automatically, it’s good to hold out for the person asked; they might have an even greater answer in store.&lt;/p&gt;

&lt;h3 id=&quot;ask-the-right-person&quot;&gt;Ask the Right Person.&lt;/h3&gt;
&lt;p&gt;My girlfriend answers and asks questions for a living, so I thought I’d ask her what she would say is most important about asking questions. I was expecting her focus to be like mine, to be something that the asker does to prepare their statement. Her answer, however, had more to do with the person who’s being asked. She said she thinks it’s important to make sure the person addressed is receptive to being engaged, to read their body language before asking the question, and to know your source.The Internet agrees. You don’t want to ask a four-year old for instructions on turning off your gas main. Know who you’re talking to and adress an appropriate person for the topic. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/questions/&quot;&gt;Questions&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 24, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Static vs. Dynamic]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/static-v-dyn/" />
  <id>http://localhost:4000/static-v-dyn</id>
  <updated>2014-08-15T00:00:00-00:00</updated>
  <published>2014-08-15T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;statically-typed-versus-dynamically-typed-how-languages-shift&quot;&gt;Statically Typed versus Dynamically Typed, how Languages Shift&lt;/h3&gt;

&lt;p&gt;The primary difference between static and dynamic computer languages is that in static languages, a variable must be declared as a type before it can be used in the code. These types include String, integer, float, array, etc. In a dynamic language, once the type is determined, the variable cannot change into something else (except with parsing and a few other tricks), and it must abide by the rules its type determines.&lt;/p&gt;

&lt;p&gt;The line of judement occurs when the code is compiled. In statically typed languages, this can be helpful because bugs can be located and squashed earlier. In Dynamic languages, errors don’t pop up until run time, and can as a result, be a little trickier to try to unpack.  &lt;/p&gt;

&lt;p&gt;One thing that can help developers who work in Dynamic languages is the implementation of test code to find those bugs earlier while still enjoying the freedom of not having to declare a variable type for every variable instantiation.  &lt;/p&gt;

&lt;p&gt;So, what is Ruby? Ruby is a dynamically typed language because you can change the variable type within a program, and you don’t have to determine what kind of variable you’re initiating.&lt;/p&gt;

&lt;p&gt;It’s easy to confuse the terms strongly and weakly typed languages with dynamic and static. Don’t be fooled; they aren’t the same even though they’re very similar. Although strong and static have some crossover, Ruby is actually both a dynamically and a strongly typed language. These might seem like opposites, but they really aren’t. The trick is that once a program knows what type it’s dealing with, it wants its methods to match it. That’s what makes Ruby strongly typed. Javascript is another dynamically typed language, but it happens to be also characterized as weakly typed. You can mix and match types in expressions as well as swap their type out whenever you want. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/static-v-dyn/&quot;&gt;Static vs. Dynamic&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 15, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Sample Post]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/sql/" />
  <id>http://localhost:4000/sql</id>
  <updated>2014-08-07T00:00:00-00:00</updated>
  <published>2014-08-07T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Query optimization is an automated process that finds the most efficient way to return on a user’s query. This can be quite a complex operation with many possible routes to completion, so optimization tries to do the task in the most time-efficient manner possible.&lt;/p&gt;

&lt;p&gt;One of the most important ways the optimizer works is by using a 3-part algorithm that relies heavily on join order and sort order. The algorithm’s pseudocode reads a bit like comparison shopping ($ = time); I’ll try to explain the basics of it here:&amp;lt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Maps all possible routes between the queried relationship.  It also looks at the cheapest route for returning things in a particular sorted order.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Goes back and checks on connections made with the JOIN keyword. As with the first step, it will figure out the cheapest way to join the relation pairs, followed by doing the same thing with a sort order in mind.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once these two-relation blueprints are created, the third (or more relations) in the query can be computed with an additional join. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The human element in this can play a big role in helping the query optimization pick the best route of extraction. Of course, I don’t yet know from experience what truly works best, but from the wise words of the Internet, here are some suggestions for helping the optimizer along. (Please leave me a comment if you disagree with any of these!)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Minimize subquery blocks&lt;/li&gt;

  &lt;li&gt;IN is preferable when the query is weighted in the subquery while EXISTS speeds things up when the bulk of criteria is in the main query.&lt;/li&gt;

  &lt;li&gt;Performing sort order earlier can reduce repetitive sorting later and can also make a later join smoother by clustering before joining huge chunks of data.&lt;/li&gt;

  &lt;li&gt;In joins focused on one-to-many relationship, use EXISTS instead of DINSTINCT.&lt;/li&gt;

  &lt;li&gt;Adding keys when creating tables can speed the first step in the algorithm along by adding more potential connections for the optimizer to choose from.&lt;/li&gt;

  &lt;li&gt;Start all SQL verbs on a new line.&lt;/li&gt;

  &lt;li&gt;Consider reorganizing your database schema. You may have some extra
  baggage in there somewhere.&lt;/li&gt;

  &lt;li&gt;Only query what you need. The more you ask for, the more expensive the result. Along those same lines, using &quot;*&quot; is slower than specifying columns.&lt;/li&gt;

  &lt;li&gt;Always try to JOIN on indexed fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more suggestions out there, but I’ve limited this post to the commands I have a handle on. Optimizing is a bit sophisticated for my skill level, but it’s great to be thinking about higher levels of organization and syntax as we go deeper into our learning. In general, expect your queries to be really fast. If they’re taking longer than 1 second, you can probably optimize. &amp;lt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/sql/&quot;&gt;Sample Post&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Focus on Values]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/values/" />
  <id>http://localhost:4000/values</id>
  <updated>2014-08-06T00:00:00-00:00</updated>
  <published>2014-08-06T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;a-focus-on-values--how-they-light-up-the-path&quot;&gt;A Focus on Values &amp;amp; how they Light Up the Path&lt;/h2&gt;

&lt;h3 id=&quot;first-things-first&quot;&gt;First things First&lt;/h3&gt;

&lt;p&gt;The last few years have been an exponential lesson in attention to values. I’ve spent some time futzing around outside of my value set – clearing the value palate, you could say – and I’ve spent a lot more time meditating on what values I actually do want to hold as a guide. Of course, it’s probably best to have a fine blend of values; but as for the value torch, I’d have to go with integrity. It could be argued that there are seasons for just about everything else: ambition, creativity, challenge, serenity, even honesty. Integrity, though, is something to me that’s less of a morality marker and more of a foundation, something that sets the alignment for all other values. By definition, it’s the state of being whole. It’s been the one thing that when I’ve consistently struck it, regardless of the circumstances, everything else falls into place.&lt;/p&gt;

&lt;h3 id=&quot;advice-is-a-pointer&quot;&gt;Advice is a Pointer&lt;/h3&gt;

&lt;p&gt;The advice prompt for this post strikes me as a pointer toward what the world values in me, or what values I project out into my community. My partner writes two weekly columns for San Francisco publications, and she asks me every week for editorial advice. I get this request from many different people in my circles, and it’s definitely indicative of where I’ve pointed my attention and to which values I’ve attended up to this point in my life.&lt;/p&gt;

&lt;h3 id=&quot;not-all-values-all-the-time&quot;&gt;Not all Values all the Time&lt;/h3&gt;

&lt;p&gt;I know that some of the values that I would rate as very strong for me may not always serve me well in every situation, especially in the face of stereotype threat. When I lean on challenge, adventure, ambition, and willpower, I may not respond as well to stereotype threat (I might actually reinforce the stereotype) as I would when I press further into serenity, compassion, vibrancy, and truth. The key here, again, is integrity, or knowing what combination of values will make me whole in any given moment. I think an important addition to this would be the word “agile”. Having agile integrity is important in knowing when to lean on certain values and when to back off of others. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/values/&quot;&gt;A Focus on Values&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 06, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Why Keeping it Classy isn't always Elegant]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/class-methods/" />
  <id>http://localhost:4000/class-methods</id>
  <updated>2014-07-31T00:00:00-00:00</updated>
  <published>2014-07-31T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;class-methods&quot;&gt;Class Methods&lt;/h2&gt;

&lt;p&gt;By now, instance methods are becoming fairly regular, maybe even automatic in our Ruby development.  What about class methods though? What are they good for and when might we use them?&lt;/p&gt;

&lt;p&gt;There’s a lot of chatter out there among Rubyists about the use of class methods, but one thing seems to be largely agreed upon; class methods, as a general rule, should be used sparingly and only when absolutely necessary. &lt;/p&gt;

&lt;p&gt;Class methods exist in a global state, in the context of the arguments they receive, and they can be accessed and called from anywhere. They hold a different perspective altogether from methods of object instance, which reside not just in the context of arguments but also in the state of the specific object they are called upon. In this comparison, class methods are actually closer to procedural programming (from which our increasing sophistication pulls us further away) than they are to object-oriented programming. Class methods aren’t tied in the same way to the goings-on of a specific object (even though classes ARE objects – a chicken/egg creation riddle we won’t solve here). &lt;/p&gt;

&lt;p&gt;As we’ve already seen with global variables, anything global is most often going to be less effective.  If our goal is to keep our programs, and by design, our classes more modular for easier reuse and expansion, then fewer pervasive design qualities should bring us closer to that goal. Referring to instances of objects is preferable to referring to the class as a whole. &lt;/p&gt;

&lt;p&gt;Sometimes, though, it isn’t practical to refer to a function at the instance level. We might want to execute something that isn’t or can’t be tied to a particular object. Our virus predictor challenge held one example. The program was set up to create reports for individual state objects, but then we were asked to create a report for all 50 states. One possible solution was to use a class method. The VirusPredictor class itself could call that nation-wide method because it wouldn’t make sense for an individual state object to call a report for the entire country. &lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/vp.jpg.png&quot; alt=&quot;virus predictor example&quot; /&gt;
  &lt;figcaption&gt;Virus Predictor example.&lt;/figcaption&gt; 
&lt;/figure&gt;
&lt;p&gt;What are some other possible examples of good use of class methods? One is the necessity to execute a function before an object is ever instantiated. A more specific example would be that of a user setting up a new account; no instance of the user class has been created so we could let the class do the work itself. This is characteristic of any example in which there is no specific context for the function, so the class has to be assigned the work. We might need a sum of all of the objects in our class, or an average age of all our objects. In fact, the Math Class itself is a great example of the necessity of class methods at play. We’ve seen and used a wide range of class methods for arrays, strings, hashes, etc.; but this post focuses more on class methods that we write into our own classes. &lt;/p&gt;

&lt;p&gt;What are these programmer-created classes supposed to look like? There are three stylistic choices out there that all have slightly different functioning preferences. &lt;/p&gt;

&lt;p&gt;Option 1
 self.bar&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/images/self.jpg.png&quot; alt=&quot;self for class method&quot; /&gt;
  &lt;figcaption&gt; Self for class method&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using the “self” keyword to identify a class method as something other than an instance is one solution. It’s simple and appears to be an often-preferred one from the empirical evidence online. It’s a clear-cut way to denote a single class method among a bunch of instance methods in a class. 
Option 2
bar « self&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/images/shovelself.jpg.png&quot; alt=&quot;shovel class method&quot; /&gt;
  &lt;figcaption&gt; Shovel Class Method&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This syntax works best when setting a group of class methods to a singular block.  In theory it’s more organized than the use of  “self” above, with which you’d need to look through all the code to find other potential class methods.  The « self style is also reportedly used more for metaprogramming (where you’d want self to be set for more than a single method), which is definitely not a topic for this blog post.&lt;/p&gt;

&lt;p&gt;Option 3
Class_name.bar&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/images/foobar.jpg.png&quot; alt=&quot;class name dot method&quot; /&gt;
  &lt;figcaption&gt; Class Name dot method&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is my favorite way to denote a class method. It’s clear and there’s no figuring out what “self” of the moment is calling the method as in option 1. It doesn’t seem to be the Rubyist favorite, however, so I look forward to learning more about why that is. &lt;/p&gt;

&lt;p&gt;Choosing syntax for a class method is in the end a subjective decision that may be best determined by readability and function in context. It’s important to remember that class methods don’t have access to instance methods or variables, but instance methods can access both class methods and variables. The flexibility and modularity of the instance method makes it the better choice most of the time.  The &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/11/14/why-ruby-class-methods-resist-refactoring/&quot;&gt;Code Climate blog&lt;/a&gt; offers one of the more articulate descriptions for why it’s rare that a class method is the right decision to make:&lt;/p&gt;

&lt;p&gt;”…You can’t easily swap in a new class, but you can easily swap in a new instance. This encourages building up additional behavior with composition, rather than needing to re-open and expand classes for every change.”&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/class-methods/&quot;&gt;Why Keeping it Classy isn't always Elegant&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 31, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Stereotype Threat]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/stereotype-threat/" />
  <id>http://localhost:4000/stereotype-threat</id>
  <updated>2014-07-30T00:00:00-00:00</updated>
  <published>2014-07-30T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Listening to Dr. Claude Steele deliver his data on stereotype threat sent a line of a famous Romantic poet shooting through my mind. I had to go look it up to remember it exactly, but it ended up being a line from William Wordsworth from a poem with a title too long and too boring to include here. The line though, is a telling one; it goes: “…of eye, and ear, –both what they half create, /and what perceive;… “&lt;/p&gt;

&lt;p&gt;Snooze, you might be thinking. But, wait, the point is not to lull you to sleep with iambic pentameter before the good part of this blog. It’s to suggest that human wiring for reality is and has been for a long time an entwined mess of the projected self and the perceived self.  Everyone has some ratio of it; we half create and half perceive (not usually a 50/50 split). No one is fully in control of how they come across in the world. Unfortunately, as a result we get stereotyped.  We get lumped together. We get something else that came out of Wordsworth’s era, a category and a label.&lt;/p&gt;

&lt;p&gt;It was really fascinating to hear what Steele’s studies uncovered about the impact of identity threat. There seems to be a wild paradox in his data: an individual ends up gripping (or being gripped by) an identity that is under threat. Someone who is the only one of something in a room feels the weight of that identity more, and the stereotype can become relevant in the mind of that individual to the point that they fear reinforcing it. The fact that this can lead to failure and subpar performance is testament to the complexity of the human mind. The part of the individual that threatens them the most is that which they are both more likely to protect and that they also want to set free from oppressive societal misconceptions. In essence, under pressure we can end up taking on other’s perceptions of us in an attempt to escape other’s perceptions of us. &lt;/p&gt;

&lt;p&gt;The outcome of his research consistently spanned many different race and gender groups. Stereotype threat is a very real and powerful thing that, while always uncomfortable, seems to be exponentially powerful under the push of heavy loads of prejudice and discrimination.  &lt;/p&gt;

&lt;p&gt;So how to address these threats in the workplace, especially in a sector so notoriously intent on homogeneity? I think it’s important to be vocal and respectful and to also give people the space to feel uncomfortable. Talking to people and being vulnerable is a great start. &lt;/p&gt;

&lt;p&gt;Stereotype threat has impacted me in powerful ways, but I don’t think focusing on what threatens my identity as a straight, white male is an important focus. I think for people like me, who don’t visibly reside in marginalized territory, it’s more important to focus on identifying those stereotypes, fueled by prejudice and discrimination, which have benefitted me at the expense of others. I feel like these, marked by language and attitude, are the pressure points at which real change can be exacted. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/stereotype-threat/&quot;&gt;Stereotype Threat&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 30, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Real World Models]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Classes/" />
  <id>http://localhost:4000/Classes</id>
  <updated>2014-07-25T00:00:00-00:00</updated>
  <published>2014-07-25T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;how-classes-can-model-real-world-objects&quot;&gt;How Classes can Model Real World Objects&lt;/h2&gt;

&lt;p&gt;Classes and Data Structures can easily be used to model real-world objects.  Classes are, by definition, first-class objects. They are open-ended, so by design they are breathable like real-world objects. They can have elements added to them in order
to match changing technologies, or other structures, or business needs. They can grow and shrink. &lt;/p&gt;

&lt;p&gt;Naming is an important element in modeling real-world objects. We can literally give objects a cyborg-stye reality by naming them and their functions and characteristics – or attributes – in classes.&lt;/p&gt;

&lt;p&gt;Here’s an example of how a class can model the planning and construction of a house. There are a limited number of style options for this program. It’s just a simple example, but hopefully it illustrates the point: classes can mimic the world around us.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/code1.jpg.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;You can see that the HouseBuilder object initializes much like the origin of a plan for an actual house, with arguments for the desired square footage as well as the style of house desired. &lt;/p&gt;

&lt;p&gt;Each Housebuilder object stores instance variables to hold those details that are intrinsic to its design. We want each method in the class to do only one thing ideally so that the program is as modular as possible. In other words, we want to be able to break a part of the class off with as little possible chance of breaking the whole thing as we can. &lt;/p&gt;

&lt;p&gt;Now that we have the basics stored in the HouseBuilder object, we want to create the floorplan.  This will store the basic components of the house object in more instance variables.  In a refactor of this class, each of the instance variables stored in the floorplan could be expanded into subclasses all their own. A “beds” (bedroom) could be a subclass that inherits from a HouseBuilder and defines its own methods, like fenestration or flooring.  For this example though, we’ll leave things a little simpler.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/floorplan.jpg.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;At the top of the class, you’ll see that another file is required here, the ‘HOUSE_TYPES’ file&amp;lt;. I used this file to do all the work of storing the details for different styles of houses. That way, when it gets called to action in #features method, it can simply send a report back on design features for the desired type of house that’s been assigned to our HouseBuilder object.
Finally, we get the compiled plan for our new house in the #build_house method.  Check out the magic.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/reqrel.jpg.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/driver_term.jpg.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;But wait! There’s more!  What’s our object doing in line 87 of the driver test code? it’s calling a method that isn’t in our class. This method belongs to a module that we included in our class. This is an important (and sneaky) way in which Ruby allows us to use multiple chains of inheritance. We include a module with methods not specific to our object but that our object is allowed to call. This one takes a pair of coordinate points and tells us in what neighborhood in San Francisco our house will be situated. This method potentially works better as a module because it’s not quite inside the realm of a house’s construction, but it’s also an important external component to consider. What’s that? A mirror of real life, right? &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/mod.jpg.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Classes/&quot;&gt;Real World Models&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 25, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Peer Pairing]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/peer-pairing/" />
  <id>http://localhost:4000/peer-pairing</id>
  <updated>2014-07-23T00:00:00-00:00</updated>
  <published>2014-07-23T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;the-exponential-learning-in-peer-pairing&quot;&gt;The Exponential Learning in Peer Pairing&lt;/h2&gt;

&lt;p&gt;I have peer pairing anxiety.&lt;/p&gt;

&lt;p&gt;Whenever the hour comes, and Google sends me that dreaded message that it’s almost time to put on my headphones and talk to a stranger through my computer screen, it’s not excitement that I feel. I start sweating.  A lot. In fact, the other day, my girlfriend asked me why I was wearing a wet t-shirt. &lt;/p&gt;

&lt;p&gt;“I just got done with a peer pairing,”” I responded. &lt;/p&gt;

&lt;p&gt;I love solitude, and when I started learning and loving to write code, I thought, yes, I finally have an excuse to spend all the time in the world inside my own head. Well, now it turns out that working with another person and, more importantly, being able to articulate my thoughts to a peer on a project are some of the most important skills I can develop in this apprenticeship-like program at DBC. The anxiety around pairing is simply a pointer toward where I can develop myself, so I guess I’m starting to appreciate it as such.&lt;/p&gt;

&lt;p&gt;I also wasn’t expecting the goldmine that peer pairing turns out to be. My learning has grown exponentially from peer pairing. I’ve had the realization that while the rate at which I learn independently might generate competence, the rate at which I learn from others has the potential to create excellence. Learning tricks from everyone = way more tricks.&lt;/p&gt;

&lt;p&gt;So, I’m really into it even though it makes me uncomfortable. &lt;/p&gt;

&lt;p&gt;The coupling of peer pairing and the feedback system seems like a biceps/triceps kind of relationship. Without one, the strength of the other would be far less pronounced. Feedback has had the effect of controlling my momentum in order that I don’t punch myself in the face, so to speak. Also, I feel like if I only received feedback on the work I did, I’d have no opportunity to address the way my thought processes restrict the flexibility of my thinking.&lt;/p&gt;

&lt;p&gt;I like the fact that it’s anonymous, or pseudo-anonymous. (It’s not that difficult to figure out who said what.) Not everyone can say exactly what they’re thinking in person, and not everyone knows exactly what they think about an interaction until they’ve had time to think about it. In general, it seems like the percent honesty goes way up when there’s an option to write an anonymous note. For me, I like to go back to working independently after a peer session and see just how a pairing has impacted my thinking before I give feedback. &lt;/p&gt;

&lt;p&gt;Someone left me a piece of feedback the other day suggesting that I develop myself in this one particular way. I felt a range of emotions that came with thoughts like “inadequate” and “incompetent”. But then my competitive side took over, and I thought, no way am I going to get that feedback again, and so I spent an hour or so researching and practicing the suggestion.  What happened was inexplicable:  everything changed, even things seemingly unrelated. The way I approached challenges, even the way I thought about pseudocode, was totally different than it had been before. The feedback wasn’t about skill; it was just about the taking of steps. It made such a weird, huge difference that I’m really grateful for it and have since been hoping for more of the actionable stuff. &lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/peer-pairing/&quot;&gt;Peer Pairing&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Loops]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Loops/" />
  <id>http://localhost:4000/Loops</id>
  <updated>2014-07-18T00:00:00-00:00</updated>
  <published>2014-07-18T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;looping-is-a-miracle&quot;&gt;Looping is a Miracle&lt;/h2&gt;

&lt;p&gt;Not really, but loops are an import part of getting computers to do all of human’s boring shit.  Computers don’t get bored of looping or repetition; in fact, they’ll do it forever if you’re not careful. &lt;/p&gt;

&lt;p&gt;There are several different ways to loop in Ruby. Each is useful, but more importantly, each of them is useful in different scenarios. Some methods that do the work of a loop don’t actually look like loops at all. Here’s a brief description of the different ways to iterate through a collection of data.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For Loop&lt;/h3&gt;
&lt;p&gt;It seems the for loop, while popular in other languages, is not usually at the top of a Rubyist’s preference list. There are too many better alternatives. Rarely is a for-loop the most economic way to express a series of iterations, but here it is anyway:&lt;/p&gt;

&lt;p&gt;for i in 0…number_of_loops do &lt;/p&gt;

&lt;p&gt;and then the action follows and follows and follows.&lt;/p&gt;

&lt;h3 id=&quot;just-do-it-loop&quot;&gt;Just Do It Loop&lt;/h3&gt;
&lt;p&gt;A better way to do the for-loop in Ruby is to say “do it”, so here’s that:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;(0..number_of_loops).times do&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Remember, loops of this type and the last type have to be followed by the key word “end”. The “times” here lets the computer know how many times you want the loop to happen.&lt;/p&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While Loop&lt;/h3&gt;
&lt;p&gt;“While” works like “for” except for the fact that it passes a Boolean into the equation. As long as the Boolean tests true, we keep the loop spinning. Make sure and tack an “end” onto this after your instructions, or you’ll have problems.&lt;/p&gt;

&lt;p&gt;while x &amp;gt; 0 &lt;/p&gt;

&lt;p&gt;get shit done, etc.&lt;/p&gt;

&lt;h3 id=&quot;until&quot;&gt;Until&lt;/h3&gt;

&lt;p&gt;“Until” utilizes a Boolean as well. Everything keeps happening until that Boolean turns true. So, the “until” loop needs things to be false in order to keep on looping, and it also needs an “end” after the action.&lt;/p&gt;

&lt;p&gt;until x &amp;lt; 0 do &lt;/p&gt;

&lt;p&gt;whatever it is you do.&lt;/p&gt;

&lt;h3 id=&quot;uptodownto&quot;&gt;upto/downto&lt;/h3&gt;
&lt;p&gt;You’ll notice that in some of the examples above I used two periods and in some three. When three periods are in play, the loop goes up to but does not include the final indicator. In the same way, “upto” and “downto” take us ride up to the brink of our limits. &lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;100.downto(0) do&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.upto(200) do&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Don’t forget your “end”.&lt;/p&gt;

&lt;h3 id=&quot;each&quot;&gt;each&lt;/h3&gt;
&lt;p&gt;Then there are those single-word methods that do all the work of what we have in the above examples. See the Enumerable mixin for a comprehensive list of specialized looping. Perhaps the most useful is the self-explanatory #each:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;array.each do&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let me know if I’ve missed any!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Loops/&quot;&gt;Loops&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How Taking the Bus Made Tech the Enemy]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Tech_Shuttles/" />
  <id>http://localhost:4000/Tech_Shuttles</id>
  <updated>2014-07-17T00:00:00-00:00</updated>
  <published>2014-07-17T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;the-tech-shuttle-debate&quot;&gt;The Tech Shuttle Debate&lt;/h2&gt;

&lt;p&gt;San Francisco was once a sanctuary for just about anyone, but now the city is commonly referred to as a “homogenized college campus.” Unfortunately, the change isn’t just a cosmetic one but also one driven by spikes in evictions, homelessness, and economic disparity.  That’s way too much for one blog post, but there’s one thing that’s become a symbol of all the turmoil: the tech shuttle buses.&lt;/p&gt;

&lt;p&gt;These charters are what many tech critics have decided to fixate upon, a tangible symbol that can be personally accessed and addressed.  But what’s the big deal? Buses are good, right? they’re argued to cut down on pollution and reduce road congestion. Many of the tech giants are using them now to haul a city-wide average of 35,000 boarders a day to jobs south in Silicon Valley.  Google and others tout their buses as the cleanest diesel vehicles available. The rides are considered a company perk and are equipped with wifi and baristas, and they’re not just vehicles of transportation; they’re also vehicles that foster a massive economic boom in the Bay Area.&lt;/p&gt;

&lt;p&gt;The buses have cut something deeper than their routes across the city’s network of streets though.  In his beautiful and interactive &lt;a href=&quot;#picspace&quot;&gt;“Clusters of Affluence”&lt;/a&gt; map, data-journalist, Chris Walker, shows how property values have spiked along the various bus routes.  The flip side of this is that evictions have also spiked. Landlords know they can double and sometimes triple the price of a rental and still have no problem renting it. It’s common in my neighborhood to show up at an open house for a rental and be met with competition offering a full year’s rent in cash, and evictions are the highest in a decade. Of course, properties along the bus routes have the strongest draw as well as some of the highest prices. &lt;/p&gt;

&lt;p&gt;So, for each car commute a shuttle bus eliminates, it potentially creates several more in displaced workers who are forced to move and commute back IN to the city for their job.  The environmental argument for the shuttles grows weaker.&lt;/p&gt;

&lt;p&gt;Another problem with the shuttles is their unwarranted use of city resources. They often park in MUNI bus stops while city buses wait in the street, paying city bus riders wait for tech employees to load, and the already horrendous traffic backs up even further.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;http://stamen.com/&quot;&gt;&lt;img src=&quot;/images/stamen.jpg.png&quot; alt=&quot;&quot; /&gt; 
  &lt;figcaption&gt;&lt;a href=&quot;http://stamen.com/&quot; title=&quot;Stamen Design has a bunch of amazing maps.&quot;&gt;Stamen Design has a bunch of amazing maps, and they took the tech bus routes as inspiration for this one&lt;/a&gt;.&lt;/figcaption&gt;


 
So, what&#39;s the solution? Some critics have taken to protesting: slashing bus tires, breaking windows, blocking the street, and even vomiting on the vehicles. While protesting is a great way to get the conversation started and heard, as one bus employee said, it also involves &quot;misplaced hostility&quot; and no long-term solution. Alternatively (and in response), the City of San Francisco pushed a pilot program through that would &lt;a href=&quot;http://www.reuters.com/article/2014/05/02/us-usa-tech-lawsuit-idUSBREA410Z720140502&quot;&gt;charge tech companies $3.55&lt;/a&gt; per stop per day to use city bus stops, among other mandates. This makes sense but also just &quot;pays&quot; for something that isn&#39;t really changing. I think a better solution would be for tech companies to partner with San Francisco, San Mateo, and Santa Clara counties to extend the BART line from SFO to Silicon Valley. There&#39;s already a BART project underway to reach Silicon Valley from the East Bay, so why not implement it on the SF side as well? That way, tech companies are giving back to the Bay Area while supporting their own workers and cutting their commutes.  It would induce an integration: tech employees would commute with the people in the Bay Area rather than above them in, as writer &lt;a href=&quot;http://www.guernicamag.com/daily/rebecca-solnit-resisting-monoculture/&quot;&gt;Rebecca Solnit&lt;/a&gt; describes the charter buses, &quot;a cross between a limousine and an armored personnel carrier.&quot;
&lt;/a&gt;&lt;/figure&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Tech_Shuttles/&quot;&gt;How Taking the Bus Made Tech the Enemy&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 17, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Javascript]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Javascript/" />
  <id>http://localhost:4000/Javascript</id>
  <updated>2014-07-11T00:00:00-00:00</updated>
  <published>2014-07-11T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;why-javascript&quot;&gt;Why Javascript?&lt;/h3&gt;

&lt;p&gt;Javascript was created in just 10 days. It’s unique in that way as most languages have an incubation time in a lab where much troubleshooting and bug-fixing occurs. Javascript did not. It came out like a quick and dynamic but untrained boxer, flashy and competent but riddled with flaws; and as a result, it took many years and &lt;a href=&quot;https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript&quot;&gt;many shots&lt;/a&gt; to become the favored contender that it is today.&lt;/p&gt;

&lt;p&gt;It was created by Brendan Eich, and today It’s a trademark of the Oracle Corporation; but like that ambitious and restless boxer, Javascript has been funneled through a labyrinth of gyms and trainers on its way up. It’s been layered with capabilities and components as a result.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_b.jpg&quot;&gt;&lt;img src=&quot;/images/semicolon.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;The imperfect separator does the work of separating statements in Javascript.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It was born in 1995, but its upward momentum was somewhat thwarted by &lt;a href=&quot;http://webaim.org/blog/user-agent-string-history/&quot;&gt;the great browser wars&lt;/a&gt; of the late 90’s and early millenium. It did appreciate with some cyclical standardization, and then in 2005, Javascript got a major foothold. A guy named Jesse James Garret released a series of technologies for which Javascript was the backbone. Its relevancy went suddenly and exponentially fertile.&lt;/p&gt;

&lt;p&gt;Needless to say, it hasn’t always been loved by all, and It’s not all to be loved. After all, it hasn’t shed all those nasty habits from its street-fighting days. One JS expert, &lt;a href=&quot;http://it-ebooks.info/book/274/&quot;&gt;Douglas Crockford&lt;/a&gt; had this to say about the language in its totality:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;some of those features were more trouble than they were worth. Some of them were poorly specified… more likely to cause portability problems. Some resulted in code that was difficult ot read or modify. Some induced me to write in a manner that was too tricky and error-prone. And some of those features were design errors. Sometimes language designers make mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, Javascript continues to grow in dynamism and power. When learning it, It’s important to focus on what it does well. So, why use it? The reasons are multifold: &lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;It&#39;s easy to learn.&lt;/li&gt;
     &lt;li&gt;It&#39;s simple and accessible to edit. You don&#39;t need any fancy software to make it happen.&lt;/li&gt;
     &lt;li&gt;It makes use of prototyping. Any object can be created for any situation, and they all inherit properties of the object protoype. This allows for a ton of flexibility.&lt;/li&gt;
     &lt;li&gt;Web development tools are set up to use Javascript. this = simplicity.&lt;/li&gt;
     &lt;li&gt;Ajax. This is what makes Javascript work without a page reload.&lt;/li&gt;
     &lt;li&gt;HTML5 is like Javascript&#39;s longtime sparring partner; they&#39;ve been designed to understand one another.&lt;/li&gt;
     &lt;li&gt;It&#39;s &lt;a href=&quot;http://nodejs.org/&quot;&gt;ever-evolving&lt;/a&gt;.&lt;/li&gt;
   &lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Javascript/&quot;&gt;Javascript&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 11, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Thinking About Thinking]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Learning_styles/" />
  <id>http://localhost:4000/Learning_styles</id>
  <updated>2014-07-10T00:00:00-00:00</updated>
  <published>2014-07-10T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;abstract-sequential-meets-concrete-random&quot;&gt;Abstract Sequential Meets Concrete Random&lt;/h3&gt;

&lt;p&gt;In retrospect, my two dominant thinking styles are pretty clearly demarcated. In the past I’ve attributed this to being a Gemini, so I’m glad to finally have a more academically-reinforced reason for my volatility. I’d say I’ve tended mostly to volley between the two, but seeing them laid out all table-bound, I’m realizing the potential in synthesizing them as well.&lt;/p&gt;

&lt;p&gt;I’m a close split between Concrete Random and Abstract Sequential, which by definition, includes both polarity as well as some crossover. I like experimenting and using my intuition as much as I like to analyze and apply logic. Sometimes this pairing has proven contradictory or mutually exclusive, and at other times, it’s been alchemical. I do like to jump into something head-first, sometimes before I fully understand it; but I’m also incredibly uncomfortable with this inclination and will often pull back and try to force out a plan of action. I like trial and error as much as I like access to and info from more informed mentors, and I thrive on competition just as much as I like to work in complete isolation for days on end.&lt;/p&gt;

&lt;p&gt;What I’ve gathered about my learning from this look at my two styles is that I need to be careful about one style canceling out the vitality of the other. I know when I get fascist about a plan of action, my Abstract Sequential self wants the disruptive, risk-taking Concrete Random self to stick to the logic. I also know that the CR will trial and error himself into a frenzy while the AS is happy to ask for some guidance or to consult a tutorial. &lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/learn_style.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Synthesizing styles can be very enriching.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I think it would behoove me to allow a little more dialogue between these two: to lean toward their collaboration rather than their conflict. I think it boils down to change and agility. There’s a huge potential benefit from having different styles and outlets. Allowing myself to change things up, to pull in a player off the bench, to mix and match, to let one style take precedence when a situation calls for it, and to avoid defaulting to habit could all really improve my learning and my efficiency. This is where my &lt;a href=&quot;http://mindsetonline.com/changeyourmindset/firststeps/&quot;&gt;mindset&lt;/a&gt; must come into play. The contradiction that arises from these two learning styles has been largely a result of a fixed mindset, of a first thought is last chance kind of rationalizing. With the development of a more sophisticated growth mindset, I think my two learning styles can be integrated and mutually beneficial rather than primarily adverse.&lt;/p&gt;

&lt;p&gt;Also, I’m trying to pay close attention to where these two styles cross over. It seems they both thrive on working through problems alone, so I have to continue to give myself ample solitude to really synthesize the concepts I’m learning. Both styles also have a tough time with too much routine and rule restrictions. Keeping a regimen that allows for innovation and exploration will be one of my greatest challenges, but it should also prove to be very rewarding.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Learning_styles/&quot;&gt;Thinking About Thinking&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 10, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[CSS Positioning]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/CSS-Positioning/" />
  <id>http://localhost:4000/CSS-Positioning</id>
  <updated>2014-07-03T00:00:00-00:00</updated>
  <published>2014-07-03T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Positioning elements on the page has everything to do with how the user experiences the space they’ve entered. It gives developers the opportunity, to some degree, to guide the user down a particular route. It can influence where one is likely to first direct their attention and where one is likely to end up. Positioning can also point toward what a user might end up feeling is the single most important takeaway from their interaction with the page or application.&lt;/p&gt;

&lt;p&gt;There are four types of positioning, and the following is a brief description of the powers each one harnesses. Pay extra close attention to how each interacts with the left/right/bottom/top properties. These interactions demonstrate how these positionings can be useful.&lt;/p&gt;

&lt;h3 id=&quot;static&quot;&gt;Static&lt;/h3&gt;

&lt;p&gt;Static positioning is the default. Without explicit definition, all elements are static. They sit in whatever way the cascade of the page dictates. Static elements don’t care about top/bottom/left/right properties. Adding one of these will do nothing to a static element.&lt;/p&gt;

&lt;h3 id=&quot;relative&quot;&gt;Relative&lt;/h3&gt;

&lt;p&gt;Relative positioning has a tricky name. It might seem like it’s measured “relative to” something else, but in fact, it’s measured relative to itself, specifically to where it would normally be on the page. This is where the left/right/bottom/top properties become so useful. They tell the relative-positioned element how far and in what direction from its origin to move. These have a special relationship with the next type: absolute. Relatives are often used as parents for absolute-positioned elements. Relative parent elements can be thought of the “relative” that gave “absolutely” everything to its child. &lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/positions.png&quot; /&gt;
  &lt;figcaption&gt;&lt;a href=&quot;http://cssdog.com/css_tricks.html&quot; title=&quot;The Absolute-Relative Relationship&quot;&gt;The Absolute-Relative Relationship&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;absolute&quot;&gt;Absolute&lt;/h3&gt;

&lt;p&gt;Absolute elements are like the grandchildren of normal flow in that they tend to be once-removed from it. An absolute-positioned element is relative to the next closest parent that isn’t positioned as static. Top/bottom/left/right properties will move an absolute element in relation to where it is within that parent and not in relation to its own place on the page. This positioning is uniquely useful because it allows overlapping of other elements. When several siblings are all positioned absolute, a z-index assignment will give them a stacking order for overlap.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/absolute.png&quot; /&gt;
  &lt;figcaption&gt;&lt;a href=&quot;http://www.webopius.com/content/144/css-absolute-and-relative-positioning-explained&quot; title=&quot;Absolute Positioning&quot;&gt;Absolute positioning&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;/h3&gt;

&lt;p&gt;No amount of scrolling in the browser window will move a fixed element. It’s stuck. It’s the reject element in the normal flow; all the other elements ignore it and act like it doesn’t exist. The stubborn fixed element doesn’t care though. It stays right where the top/bottom/left/right properies set it, and it overlaps anything flowing under it in body of the document.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/CSS-Positioning/&quot;&gt;CSS Positioning&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on July 03, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Examining Website Design]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/website-design/" />
  <id>http://localhost:4000/website-design</id>
  <published>2014-06-28T00:00:00+00:00</published>
  <updated>2014-06-28T00:00:00+00:00</updated>
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;pitchforktv&quot;&gt;Pitchfork.tv&lt;/h3&gt;

&lt;p&gt;I’ve been a longtime visitor to Pitchfork for the music. It’s consistently a great place to find new music, but only recently has it also become a better site to be on as well. It used to be kind of a mess, with unclear navigation and a disorganized collage. The newer version is perfectly set up for what the site is best for: discovering music. It’s still not the greatest looking site in my opinion. I’m not a huge fan of the all-black background and overall heaviness. I like it’s use of the gallery a lot though; it streamlines and seems to set everything equally so the user’s eye can be drawn toward the aesthetic that tends to match individual musical preference. The featured video is obviously where the eye is immediately drawn, which creates a powerful minimalism for the front page (and other pages too), is ever-changing and, as a result, an attraction. The site also does a great job of understating the excessive numbers of pages it contains with the gray tabs and tiny font. I generally walk away from Pitchfork having found something new,  and feeling like there’s a lot of great music in the world and not enough time to enjoy all of it.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/Pitchforktv.jpg.png&quot; /&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://pitchfork.com/tv/&quot; title=&quot;A site for discovering music&quot;&gt;A gallery for music discovery&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;scribd&quot;&gt;Scribd.&lt;/h3&gt;

&lt;p&gt;Scribd. calls itself the Netflix of books, and it’s getting closer to living up to that title. When I first started using the site, it was a cluttered collection of academic papers with a million ads, but it’s successfully evolved into something definitely more elegant and definitely more Netflixesque. It bookmarks where a user’s at with each item viewed, and it gives some excellent suggestions based on past reads. I continue to find stuff on there that I haven’t found anywhere else online alongside bestsellers. Unfortunately, it’s a paid site, so when you first get there, you get asked for money or a free month trial. Had I not enjoyed its perks when it was free, this would be a deal breaker. Once logged in, my attention is usually pulled into the recommendation sections, and if I don’t get sucked into one of these,  then I end up circling up toward the icons that show where I left off in past reads. I like that it’s equally easy to get lost down a trail of suggestions as it is to search its trove for obscure papers on whatever. I generally leave the site feeling inspired.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/scribd.jpg.png&quot; /&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.scribd.com/&quot; title=&quot;The Netflix of Books.&quot;&gt;The Netflix of Books&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;ubuweb&quot;&gt;Ubuweb&lt;/h3&gt;

&lt;p&gt;Ubuweb is compact, dense, content heavy, and intense. I love it because it manages to maintain minimilism in an unorthodox sort of way. It uses incredibly tiny font and a lot of white space. The top header on each page is usually cryptic and creepy and, like the rest of the design, doesn’t take away from the content. The site is very light on design which lets the content stand out. And the content is really remarkable. It’s a giant archive of rarely found audio material, poetry, and some visual representations as well. It’s a unique site, one that took me more than one visit to fall in love with. The design makes it feel like mining for a treasure rather than being handed one. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/ubu.jpg.png&quot; /&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.ubuweb.tv/&quot; title=&quot;Wonderland audio and text archive.&quot;&gt;Wonderland audio and text archive&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/website-design/&quot;&gt;Examining Website Design&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on June 28, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[On Fireside]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/On-Fireside/" />
  <id>http://localhost:4000/On-Fireside</id>
  <updated>2014-06-27T00:00:00-00:00</updated>
  <published>2014-06-27T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;thoughts-on-fireside&quot;&gt;Thoughts on Fireside&lt;/h2&gt;

&lt;p&gt;I feel honored to be part of an educational experiment like Dev Boocamp. The day I started Phase 0, Dev announced their acquisition by Kaplan. To me this signals that DBC has brought their experiment with learning and teaching to a pinnacle that that has peaked the interest of scholars and others invested in the learning process worldwide. That’s an exciting place and time in which to be joining. That said, I’m pretty terrified. This program seems to ask not just for a ton of learning, but for a change in the way I think about learning: a huge and humbling change to undertake. &lt;/p&gt;

&lt;p&gt;One of the most invigorating takeaways from the fireside video was Shereef’s description of the “creator” versus the “entitlement” mindset. It seems like traditional education models definitely reinforce the entitlement mode of being. I have a Master’s degree, and I know from spending large amounts of time with them that the academics’ mindset can definitely foster entitlement and that “restaurant” attitude. I’m thrilled to be walking into an alternative to that. The “kitchen” perspective is definitely a mode of engagement that I’d like to be able to contribute to both my job and my personal life.&lt;/p&gt;

&lt;!-- ![Smithsonian Image](http://localhost:4000/images/3953273590_704e3899d5_m.jpg)
{: .pull-right} --&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/On-Fireside/&quot;&gt;On Fireside&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on June 27, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Post with a Background Image]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/background-image/" />
  <id>http://localhost:4000/background-image</id>
  <published>2013-10-26T00:00:00+00:00</published>
  <updated>2013-10-26T00:00:00+00:00</updated>
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Here be a sample post with a custom background image. To utilize this “feature” just add the following YAML to a post’s front matter.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;filename.png&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This little bit of YAML makes the assumption that your background image asset is in the &lt;code&gt;/images&lt;/code&gt; folder. If you place it somewhere else or are hotlinking from the web, just include the full http(s):// URL. Either way you should have a background image that is tiled.&lt;/p&gt;

&lt;p&gt;If you want to set a background image for the entire site just add &lt;code&gt;background: filename.png&lt;/code&gt; to your &lt;code&gt;_config.yml&lt;/code&gt; and BOOM — background images on every page!&lt;/p&gt;

&lt;div xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; about=&quot;http://subtlepatterns.com&quot; class=&quot;notice&quot;&gt;Background images from &lt;span property=&quot;dct:title&quot;&gt;Subtle Patterns&lt;/span&gt; (&lt;a rel=&quot;cc:attributionURL&quot; property=&quot;cc:attributionName&quot; href=&quot;http://subtlepatterns.com&quot;&gt;Subtle Patterns&lt;/a&gt;) / &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC BY-SA 3.0&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/background-image/&quot;&gt;Post with a Background Image&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on October 26, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Syntax Highlighting Post]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/code-highlighting-post/" />
  <id>http://localhost:4000/code-highlighting-post</id>
  <updated>2013-08-20T00:00:00-00:00</updated>
  <published>2013-08-16T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntax_highlighting&quot;&gt;Syntax highlighting&lt;/a&gt; is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.&lt;/p&gt;

&lt;h3 id=&quot;pygments-code-blocks&quot;&gt;Pygments Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/assets/less/pygments.less&lt;/code&gt; and compile &lt;code&gt;main.less&lt;/code&gt; with your favorite preprocessor. Or edit &lt;code&gt;main.css&lt;/code&gt; if that’s your thing, the classes you want to modify all begin with &lt;code&gt;.highlight&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-240px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Line numbering enabled:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     {% if page.previous %}
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.previous.url }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.previous.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     {% endif %}
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     {% if page.next %}
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.next.url }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.next.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     {% endif %}
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.pagination --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TagIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Page&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_layouts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_index.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_title_prefix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Tagged: &amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_title_suffix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;#8211;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;An archive of posts tagged &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;standard-code-block&quot;&gt;Standard Code Block&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;
    {% if page.previous %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;
    {% endif %}
    {% if page.next %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;
    {% endif %}
&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;fenced-code-blocks&quot;&gt;Fenced Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/assets/less/coderay.less&lt;/code&gt; and compile &lt;code&gt;main.less&lt;/code&gt; with your favorite preprocessor. Or edit &lt;code&gt;main.css&lt;/code&gt; if that’s your thing, the classes you want to modify all begin with &lt;code&gt;.coderay&lt;/code&gt;. Line numbers and a few other things can be modified in &lt;code&gt;_config.yml&lt;/code&gt; under &lt;code&gt;coderay&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;id&quot;&gt;#container&lt;/span&gt; {
    &lt;span class=&quot;key&quot;&gt;float&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;left&lt;/span&gt;;
    &lt;span class=&quot;key&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;float&quot;&gt;-240px&lt;/span&gt; &lt;span class=&quot;float&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;float&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;key&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;100%&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;role&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;navigation&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    {% if page.previous %}
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{{ site.url }}{{ page.previous.url }}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{{ page.previous.title }}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;Previous article&lt;span class=&quot;tag&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
    {% if page.next %}
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{{ site.url }}{{ page.next.url }}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{{ page.next.title }}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;Next article&lt;span class=&quot;tag&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /.pagination --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TagIndex&lt;/span&gt; &amp;lt; &lt;span class=&quot;constant&quot;&gt;Page&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;initialize&lt;/span&gt;(site, base, dir, tag)
      &lt;span class=&quot;instance-variable&quot;&gt;@site&lt;/span&gt; = site
      &lt;span class=&quot;instance-variable&quot;&gt;@base&lt;/span&gt; = base
      &lt;span class=&quot;instance-variable&quot;&gt;@dir&lt;/span&gt; = dir
      &lt;span class=&quot;instance-variable&quot;&gt;@name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.process(&lt;span class=&quot;instance-variable&quot;&gt;@name&lt;/span&gt;)
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.read_yaml(&lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(base, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_layouts&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tag_index.html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] = tag
      tag_title_prefix = site.config[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tag_title_prefix&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] || &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Tagged: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
      tag_title_suffix = site.config[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tag_title_suffix&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] || &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;#8211;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;#{&lt;/span&gt;tag_title_prefix&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;#{&lt;/span&gt;tag&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;An archive of posts tagged &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;#{&lt;/span&gt;tag&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;github-gist-embed&quot;&gt;GitHub Gist Embed&lt;/h3&gt;

&lt;p&gt;An example of a Gist embed below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mmistakes/6589546.js&quot;&gt; &lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/8531391.js&quot;&gt; &lt;/script&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/code-highlighting-post/&quot;&gt;Syntax Highlighting Post&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 16, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Sample Link Post]]></title>
 <link rel="alternate" type="text/html" href="http://mademistakes.com" />
  <id>http://localhost:4000/sample-link-post</id>
  <published>2013-08-12T00:00:00+00:00</published>
  <updated>2013-08-12T00:00:00+00:00</updated>
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This theme supports &lt;strong&gt;link posts&lt;/strong&gt;, made famous by John Gruber. To use, just add &lt;code&gt;link: http://url-you-want-linked&lt;/code&gt; to the post’s YAML front matter and you’re done.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/sample-link-post/&quot;&gt;Sample Link Post&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on August 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Post with a Video]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/video-post/" />
  <id>http://localhost:4000/video-post</id>
  <published>2013-06-25T00:00:00+00:00</published>
  <updated>2013-06-25T00:00:00+00:00</updated>
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/SU3kYxJmWuQ&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;Video embeds are responsive and scale with the width of the main content block with the help of &lt;a href=&quot;http://fitvidsjs.com/&quot;&gt;FitVids&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not sure if this only effects Kramdown or if it’s an issue with Markdown in general. But adding YouTube video embeds causes errors when building your Jekyll site. To fix add a space between the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tags and remove &lt;code&gt;allowfullscreen&lt;/code&gt;. Example below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;560&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;315&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//www.youtube.com/embed/SU3kYxJmWuQ&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/video-post/&quot;&gt;A Post with a Video&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on June 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Post with Large Feature Image and Text]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/readability-feature-post/" />
  <id>http://localhost:4000/readability-feature-post</id>
  <updated>2013-06-30T00:00:00-00:00</updated>
  <published>2013-05-23T00:00:00+00:00</published>
  
  <author>
    <name>Anders Howerton</name>
    <uri>http://localhost:4000</uri>
    <email>anders.e.howerton@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This is a sample post with a large feature image up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.&lt;/p&gt;

&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;

&lt;h2 id=&quot;cupidatat-90s-lo-fi-authentic-try-hard&quot;&gt;Cupidatat 90’s lo-fi authentic try-hard&lt;/h2&gt;

&lt;p&gt;In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sartorial hoodie &lt;/li&gt;
  &lt;li&gt;Labore viral forage&lt;/li&gt;
  &lt;li&gt;Tote bag selvage &lt;/li&gt;
  &lt;li&gt;DIY exercitation et id ugh tumblr church-key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.&lt;/p&gt;

&lt;p&gt;Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.&lt;/p&gt;

&lt;h2 id=&quot;forage-occaecat-cardigan-qui&quot;&gt;Forage occaecat cardigan qui&lt;/h2&gt;

&lt;p&gt;Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.&lt;/p&gt;

&lt;h2 id=&quot;hoodie-duis&quot;&gt;Hoodie Duis&lt;/h2&gt;

&lt;p&gt;Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.&lt;/p&gt;

&lt;h3 id=&quot;thundercats-ho&quot;&gt;Thundercats Ho!&lt;/h3&gt;

&lt;p&gt;Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.&lt;/p&gt;

&lt;p&gt;Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.&lt;/p&gt;

&lt;p&gt;Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/readability-feature-post/&quot;&gt;Post with Large Feature Image and Text&lt;/a&gt; was originally published by Anders Howerton at &lt;a href=&quot;http://localhost:4000&quot;&gt;ah && a&lt;/a&gt; on May 23, 2013.&lt;/p&gt;</content>
</entry>

</feed>
